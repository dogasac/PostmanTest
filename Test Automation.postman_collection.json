{
	"info": {
		"_postman_id": "0d4a0eba-00da-4768-8694-45f81b9dfbc1",
		"name": "Test Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45771611"
	},
	"item": [
		{
			"name": "{{base_url}}/posts/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"GET Response Status Code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"GET Response Time is acceptable\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"GET Response has JSON Content-Type\", function() {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"pm.test(\"GET Response has expected structure\", function() {",
							"    const responseJson = pm.response.json();",
							"    ",
							"    pm.expect(responseJson).to.be.an('object');",
							"    pm.expect(responseJson).to.have.all.keys('userId', 'id', 'title', 'body');",
							"    pm.expect(responseJson.userId).to.be.a('number');",
							"    pm.expect(responseJson.id).to.equal(1);",
							"    pm.expect(responseJson.title).to.be.a('string').that.is.not.empty;",
							"    pm.expect(responseJson.body).to.be.a('string').that.is.not.empty;",
							"});",
							"",
							"",
							"const getResponse = pm.response.json();",
							"pm.environment.set(\"first_post_title\", getResponse.title);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/posts/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "{{base_url}}/posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Temel response testleri",
							"pm.test(\"POST Response Status Code is 201\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"POST Response Time is acceptable\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// 2. Header testleri",
							"pm.test(\"POST Response has JSON Content-Type\", function() {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"// 3. Body yapısı ve değer testleri",
							"pm.test(\"POST Response has expected structure\", function() {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson).to.be.an('object');",
							"    pm.expect(responseJson).to.have.property('id'); // yeni post ID",
							"    pm.expect(responseJson).to.have.property('title', pm.request.body.raw ? JSON.parse(pm.request.body.raw).title : '');",
							"    pm.expect(responseJson).to.have.property('body');",
							"    pm.expect(responseJson).to.have.property('userId');",
							"",
							"    pm.expect(responseJson.id).to.be.a('number');",
							"    pm.expect(responseJson.title).to.be.a('string');",
							"    pm.expect(responseJson.body).to.be.a('string');",
							"    pm.expect(responseJson.userId).to.be.a('number');",
							"});",
							"",
							"// 4. Veriyi sonraki isteklerde kullanmak için saklama",
							"const postResponse = pm.response.json();",
							"pm.environment.set(\"created_post_id\", postResponse.id);",
							"pm.environment.set(\"created_post_title\", postResponse.title);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"title\": \"Test Post Title\",\n  \"body\": \"This is the body of the post\",\n  \"userId\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/posts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Koleksiyon seviyesinde pre-request script",
					"if (!pm.environment.get(\"base_url\")) {",
					"    pm.environment.set(\"base_url\", \"https://jsonplaceholder.typicode.com\");",
					"}",
					"",
					"// Koleksiyon seviyesinde testler",
					"pm.test(\"All requests completed successfully\", function() {",
					"    // Bu koleksiyon çalıştırıldığında otomatik eklenir",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}